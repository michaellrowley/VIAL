IPFS_GATEWAY="gateway.ipfs.io";const views={main:document.getElementById("main-view"),loading:document.getElementById("loading-view"),failure:document.getElementById("failure-view")},failDescriptionElement=document.getElementById("failure-description");function showFail(e){failDescriptionElement.innerText=e,views.main.style.display="none",views.loading.style.display="none",views.failure.style.display=""}function hexDecode(e){for(var t="",n=0;n<e.length;n+=2)t+=String.fromCharCode(parseInt(e.substr(n,2),16));return t}function generateReferencePreview(e){if(null!=e.match(/CVE\-\d{4}\-\d{1,}/))return e.match(/CVE\-\d{4}\-\d{1,}/)[0];if(null!=e.match(/GHSA(\-[\w\d]{4}){3}/))return e.match(/GHSA(\-[\w\d]{4}){3}/)[0];if(null!=e.match(/michaelrowley.dev\/research/))return"Blog Post";try{return dataURL=new URL(e),dataURL.hostname+dataURL.pathname}catch(e){}return e}views.main.style.display="none",views.failure.style.display="none",views.loading.style.display="";const descriptionElement=document.getElementById("description"),creationElement=document.getElementById("creation-time"),productInfoElement=document.getElementById("product-info"),impactElement=document.getElementById("impacted-versions"),severityElement=document.getElementById("severity-data");function showMarkdownInElement(e,t){t.split("\n").forEach((t=>{const n=t.indexOf("# ");let i=null;-1!==n&&t.startsWith("#".repeat(n+1))?(i=document.createElement("h"+(n+1).toString()),i.innerText=t.substring(n+2)):(i=document.createElement("p"),i.innerText=t),e.appendChild(i)}))}function severityString(e){switch(e.type.toUpperCase()){case"CVSS3":return CVSS31.calculateCVSSFromVector("CVSS:3.1/"+e.value).baseMetricScore;case"SSVC":case"CUSTOM":return e.value}}function showEntry(e){const t=e.references;for(let e=0;e<t.length;e++){const n=document.createElement("a");n.classList.add("under-tag"),n.innerText=generateReferencePreview(t[e]);try{new URL(t[e]),n.href=t[e]}catch(e){}n.style.marginTop=(50*e).toString()+"px",document.body.appendChild(n)}showMarkdownInElement(descriptionElement,e.description),"product"in e&&(productInfoElement.innerText=e.product+" ("+e.owner+")");const n=e.severity;severityElement.innerText=("CUSTOM"===n.type.toUpperCase()?"":n.type.toUpperCase()+" Severity: ")+severityString(n),impactElement.innerText="Impacted Version(s): "+e.versions,views.main.style.display="",views.loading.style.display="none",views.failure.style.display="none"}let viaId=browserURL.searchParams.get("id");if(null==viaId)throw showFail("No VIA ID was provided."),"Error";viaId=viaId.toUpperCase();let hexKey=browserURL.searchParams.get("key");const header=document.getElementById("id-header");header.innerText=viaId;let ipfsRequest=new XMLHttpRequest;ipfsRequest.open("GET","https://ipfs.io/ipns/entries.vial.michaelrowley.dev/"),ipfsRequest.onreadystatechange=function(e){if(4===ipfsRequest.readyState){if(200!==ipfsRequest.status)return void showFail("Unable to query IPFS gateway for critical entry list.");if(data=JSON.parse(ipfsRequest.responseText),!(viaId in data))return void showFail("Unable to locate specified VIA entry in critical entry list.");const e=data[viaId];"key"in e||null==hexKey&&(hexKey=prompt("Decryption key:")),null==hexKey&&(hexKey=e.key),ipfsRequest=new XMLHttpRequest,ipfsRequest.open("GET","https://"+IPFS_GATEWAY+"/ipfs/"+e.cid),ipfsRequest.onreadystatechange=function(e){if(4===ipfsRequest.readyState){if(200!==ipfsRequest.status)return void showFail("Unable to retrieve entry ciphertext from IPFS gateway.");let t={};try{const e=new fernet.Secret(hexDecode(hexKey));let n=new fernet.Token({secret:e,token:ipfsRequest.responseText,ttl:0}).decode();t=JSON.parse(n)}catch(e){return void showFail("Unable to decrypt entry using the FERNET standard and the provided key.")}showEntry(t)}},ipfsRequest.send()}},ipfsRequest.send();
